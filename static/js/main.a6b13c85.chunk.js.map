{"version":3,"sources":["App.js","components/Output.js","components/Button.js","components/Keys.js","serviceWorker.js","index.js"],"names":["App","state","result","buttonPressed","e","buttonName","target","textContent","calculate","reset","backspace","setState","eval","slice","this","Component","Output","className","props","Button","onClick","name","Keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6b13c85.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport Keys from './components/Keys';\nimport Output from './components/Output';\n\nclass App extends Component {\n  state = {\n    result: \"\"\n  };\n\n  buttonPressed = (e) => {\n    const buttonName = e.target.textContent\n    \n    if (buttonName === \"=\") {\n      this.calculate();\n      \n    } else if (buttonName === \"C\") {\n      this.reset();\n    } \n\n    else if(buttonName === \"Back\") {\n      this.backspace();\n    }\n    \n    else {\n\n      this.setState({\n        result: this.state.result + buttonName\n        \n    });\n  };\n};\n\n\n\n  calculate = () => {\n    try {\n    this.setState ({\n      result: (eval(this.state.result) || \"\" )  + \"\"\n      });\n    } catch (e) {\n      this.setState({\n        result: \"error\"\n      })\n    }\n  };\n  \n  reset = () => {\n    this.setState({\n      result: \"\"\n    })\n  };\n\n  backspace = () => {\n    this.setState({\n      result: this.state.result.slice(0, -1)\n    })\n  };\n\n\n  render () {\n    return (\n      <div>\n        <Output result={this.state.result}/>\n        <Keys buttonPressed={this.buttonPressed}/>\n      </div>\n  \n    );\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react';\r\nimport './Output.css';\r\n\r\nclass Output extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"display\">\r\n                <p>{this.props.result}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// functional components\r\n// const Output = props => (\r\n//         <div className=\"display\">\r\n//             <p>{props.result}</p>\r\n//         </div>\r\n//     )\r\n\r\nexport default Output;","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = (props) => (\r\n    <div className=\"button-wrapper\" onClick={props.buttonPressed}>\r\n        {props.name}\r\n    </div>\r\n);\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\nimport Button from'./Button'\r\nimport './Key.css'\r\nclass Keys extends Component {\r\n \r\n  render () {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"row\" >\r\n              <Button name=\"C\"  buttonPressed={this.props.buttonPressed} />\r\n              <Button name=\"(\"  buttonPressed={this.props.buttonPressed}>(</Button>\r\n              <Button name=\")\"  buttonPressed={this.props.buttonPressed}>)</Button>\r\n              <Button name=\"*\"  buttonPressed={this.props.buttonPressed}>X</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n              <Button name=\"7\"  buttonPressed={this.props.buttonPressed}>7</Button>\r\n              <Button name=\"8\"  buttonPressed={this.props.buttonPressed}>8</Button>\r\n              <Button name=\"9\"  buttonPressed={this.props.buttonPressed}>9</Button>\r\n              <Button name=\"/\"  buttonPressed={this.props.buttonPressed}>\\</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n              <Button name=\"4\"  buttonPressed={this.props.buttonPressed}>4</Button>\r\n              <Button name=\"5\"  buttonPressed={this.props.buttonPressed}>5</Button>\r\n              <Button name=\"6\"  buttonPressed={this.props.buttonPressed}>6</Button>\r\n              <Button name=\"-\"  buttonPressed={this.props.buttonPressed}>-</Button>\r\n          </div>\r\n          <div className=\"row\">\r\n              <Button name=\"1\"  buttonPressed={this.props.buttonPressed}>1</Button>\r\n              <Button name=\"2\"  buttonPressed={this.props.buttonPressed}>2</Button>\r\n              <Button name=\"3\"  buttonPressed={this.props.buttonPressed}>3</Button>\r\n              <Button name=\"+\"  buttonPressed={this.props.buttonPressed}>+</Button>\r\n          </div>\r\n          <div className=\"row\">              \r\n              <Button name=\"Back\"  buttonPressed={this.props.buttonPressed}>Back</Button>\r\n              <Button name=\"0\"  buttonPressed={this.props.buttonPressed}>0</Button>\r\n              <Button name=\".\"  buttonPressed={this.props.buttonPressed}>.</Button>\r\n              <Button name=\"=\"  buttonPressed={this.props.buttonPressed}>=</Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Keys;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}